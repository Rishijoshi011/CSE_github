1. Explain the use of the following functions.
 Functions in Arduino Programming  

1. Serial.begin(baud rate)  
    - Initializes serial communication between the Arduino and a computer or other devices.  
    - The baud rate (e.g., `9600`, `115200`) defines the speed of communication in bits per second (bps).  
    - Example: `Serial.begin(9600);`  

2. pinMode(pin, mode)  
    - Configures a digital pin as either INPUT or OUTPUT.  
   - Example: `pinMode(7, OUTPUT); // Sets pin 7 as an output`  

3. digitalRead(pin)  
    - Reads the HIGH (1) or LOW (0) state from a digital input pin.  
    - Used for buttons, switches, or sensors that give digital output.  
   - Example: `int state = digitalRead(2); // Reads pin 2 state`  

4. digitalWrite(pin, value)  
    - Writes HIGH (1) or LOW (0) to a digital output pin.  
    - Used to turn on/off LEDs, relays, etc.  
   - Example: `digitalWrite(7, HIGH); // Turns ON device at pin 7`  

5. analogRead(pin)  
    - Reads the analog voltage (0 to 5V) from an analog pin (A0–A5).  
    - Returns a value between 0 and 1023 (10-bit resolution).  
    - Example: `int sensorValue = analogRead(A0);`  

6. analogWrite(pin, value)  
    - Writes PWM (Pulse Width Modulation) signal to pins marked with `~` (e.g., 3, 5, 6, 9, 10, 11).  
    - The `value` range is 0 to 255 (8-bit resolution).  
    - Example: `analogWrite(9, 128); // 50% duty cycle PWM`  

7. Serial.read()  
    - Reads incoming serial data (one byte at a time) from the serial buffer.  
    - Example:  
        if (Serial.available()) {
        char c = Serial.read(); // Reads one character
        }

8. Serial.println(value)  
    - Prints a value to the serial monitor and moves to a new line.  
    - Used for debugging and displaying sensor data.  
    - Example: `Serial.println("Hello, Arduino!");`  

9. pulseIn(pin, state)  
    - Measures the pulse duration (in microseconds) on a pin.  
    - Returns the time a pin stays HIGH or LOW.  
    - Example: `long duration = pulseIn(7, HIGH);`  

10. delay(ms)  
    - Pauses program execution for the specified time in milliseconds.  
    - Example: `delay(1000); // Waits for 1 second`  

11. String Related Functions  
    - String name = "Hello"; → Declares a string variable.  
    - name.length() → Returns the length of the string.  
    - name.concat(" World"); → Concatenates another string.  
    - name.substring(0, 3); → Extracts part of a string.  
    - name.toUpperCase(); → Converts string to uppercase.  

Simple programs using an arduino board.

○ LED Interfacing
void setup() {
    pinMode(11, OUTPUT);  // Set pin 11 as output
}

void loop() {
    digitalWrite(11, HIGH); // Turn LED ON
    delay(1000);           // Wait for 1 second
    digitalWrite(11, LOW);  // Turn LED OFF
    delay(1000);           // Wait for 1 second
}

○ SWITCH Interfacing
define LED 13
define BUTTON 7

void setup() {
    pinMode(LED, OUTPUT);
    pinMode(BUTTON, INPUT);
}

void loop() {
    if (digitalRead(BUTTON) == HIGH) {
        digitalWrite(LED, HIGH);
    } else {
        digitalWrite(LED, LOW);
    } 
}


○ RGB Led Interfacing

define RED 9
define GREEN 10
define BLUE 11

void setup() {
    pinMode(RED, OUTPUT);
    pinMode(GREEN, OUTPUT);
    pinMode(BLUE, OUTPUT);
}

void loop() {
    analogWrite(RED, 255);   // Red ON
    analogWrite(GREEN, 0);
    analogWrite(BLUE, 0);
    delay(1000);

    analogWrite(RED, 0);
    analogWrite(GREEN, 255); // Green ON
    delay(1000);

    analogWrite(RED, 0);
    analogWrite(GREEN, 0);
    analogWrite(BLUE, 255);  // Blue ON
    delay(1000);
}


○ MOTION Sensor interfacing
define PIR_SENSOR 2
define LED 13

void setup() {
    pinMode(PIR_SENSOR, INPUT);
    pinMode(LED, OUTPUT);
}

void loop() {
    if (digitalRead(PIR_SENSOR) == HIGH) {
        digitalWrite(LED, HIGH);
        delay(2000);
    } else {
        digitalWrite(LED, LOW);
    }
}


○ LDR Interfacing
define LDR A0
define LED 9

void setup() {
    pinMode(LED, OUTPUT);
    Serial.begin(9600);
}

void loop() {
    int value = analogRead(LDR);
    Serial.println(value);
    if (value < 300) {
        digitalWrite(LED, HIGH);
    } else {
        digitalWrite(LED, LOW);
    }
    delay(500);
}


○ Ultrasonic Sensor Interfacing
define TRIG 9
define ECHO 10

void setup() {
    pinMode(TRIG, OUTPUT);
    pinMode(ECHO, INPUT);
    Serial.begin(9600);
}

void loop() {
    digitalWrite(TRIG, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG, LOW);

    long duration = pulseIn(ECHO, HIGH);
    int distance = (duration x(mul) 0.034) / 2;

    Serial.print("Distance: ");
    Serial.print(distance);
    Serial.println(" cm");

    delay(500);
}


○ LED brightness control using PWM

define LED 9

void setup() {
    pinMode(LED, OUTPUT);
}

void loop() {
    for (int i = 0; i <= 255; i += 5) {
        analogWrite(LED, i);
        delay(50);
    }
    for (int i = 255; i >= 0; i -= 5) {
        analogWrite(LED, i);
        delay(50);
    }
}

○ Generate Different tone using PWM

int buzzer = 9; 

void setup() {
    pinMode(buzzer, OUTPUT);
}

void loop() {
    // Increasing the tone
    for (int freq = 100; freq <= 1000; freq += 50) {
        tone(buzzer, freq);
        delay(100); // Small delay to make the tone change noticeable
    }

    // Decreasing the tone
    for (int freq = 1000; freq >= 100; freq -= 50) {
        tone(buzzer, freq);
        delay(100);
    }

    delay(500); // Wait before restarting
}


3.Give the difference between Arduino and Raspberry pi.

Feature          | Arduino                | Raspberry Pi              
-----------------|------------------------|--------------------------
Type             | Microcontroller board  | Single-board computer     
Operating System | No OS, runs simple code| Runs a full OS (Linux, etc.)
Processing Power | Low (8-bit/32-bit)     | High (64-bit ARM)         
Memory (RAM)     | Few KB (e.g., 2KB)     | 512MB to 8GB              
Storage          | No built-in storage    | Uses microSD card         
Programming      | C/C++ (Arduino IDE)    | Python, C++, Java, etc.   
Connectivity     | Limited GPIOs, no WiFi | WiFi, Bluetooth, Ethernet 
Best For         | Simple electronics     | AI, networking, multitasking
Power Consumption| Very low (5V)          | Higher (needs adapter)    
Cost             | Generally cheaper      | More expensive            


4. List the key features of ESP8266 (Node MCU).

Key Features of ESP8266 (NodeMCU)  

1. Microcontroller and CPU  
    - Powered by a Tensilica L106 32-bit RISC processor.  
    - Clock speed up to 80 MHz (can be overclocked to 160 MHz).  

2. Memory and Storage  
    - Built-in 64 KB of instruction RAM and 96 KB of data RAM.  
    - Supports external flash memory (up to 16 MB).  

3. Wi-Fi Capabilities  
    - Supports 802.11 b/g/n Wi-Fi with a built-in antenna.  
    - Can work as Access Point (AP), Station (STA), or both (AP+STA mode).  
    - Supports TCP/IP, UDP, HTTP, MQTT for IoT applications.  

4. GPIO (General-Purpose Input/Output) Pins  
    - Provides 17 GPIO pins for sensor and module interfacing.  
    - Supports PWM, I2C, SPI, UART, and ADC functionalities.  

5. Analog and Digital Support  
    - One 10-bit ADC (Analog-to-Digital Converter) pin.  
    - Supports digital input/output with 3.3V logic levels.  

6. Low Power Consumption  
    - Supports multiple power-saving modes like Deep Sleep (10µA current consumption).  
    - Operates at 3.3V with a typical current draw of 70-200 mA.  

7. Programming Support  
    - Can be programmed using Arduino IDE, MicroPython, and Lua scripts.  
    - Supports AT commands for direct communication with microcontrollers.  

8. Compact and Cost-Effective  
    - Small form factor, making it ideal for IoT and embedded systems.  
    - Affordable, making it popular for hobbyists and industrial applications.  

Applications  
- Home automation systems.  
- IoT-based smart devices.  
- Wireless sensor networks.  
- Remote data monitoring and control.

5.List the key features of Raspberry Pi.

Key Features of Raspberry Pi  

1. Processor and Performance  
    - Powered by ARM-based Broadcom processors.  
    - Latest models use Quad-Core or Octa-Core CPUs with clock speeds up to 1.8 GHz.  
    - Supports 64-bit architecture for improved performance.  

2. Memory and Storage  
    - Comes with RAM options ranging from 512MB to 8GB (LPDDR2, LPDDR4, or LPDDR5).  
    - Uses a microSD card for operating system and storage.  
    - Some models support NVMe SSD via PCIe interface.  

3. Connectivity and Networking  
    - Built-in Wi-Fi (802.11 b/g/n/ac) and Bluetooth (4.2 or 5.0) in newer models.  
    - Ethernet port (Gigabit in newer models) for wired network connection.  
    - Multiple USB ports (USB 2.0, USB 3.0 in newer models) for external device connections.  

4. Display and Graphics  
    - HDMI output (micro-HDMI in newer models) supporting Full HD and 4K resolution.  
    - Graphics processing unit (GPU) for video decoding, gaming, and AI applications.  

5. GPIO (General-Purpose Input/Output) Pins  
    - 40-pin GPIO header for connecting sensors, motors, and other peripherals.  
    - Supports I2C, SPI, UART, and PWM for hardware interfacing.  

6. Operating System Support  
    - Runs Raspberry Pi OS (Linux-based).  
    - Supports other OS like Ubuntu, Windows IoT Core, and Android.  

7. Multimedia and Audio  
    - 3.5mm audio jack for stereo sound and composite video output.  
    - HDMI supports audio and video output.  

8. Power Supply and Efficiency  
    - Powered via USB Type-C (newer models) or micro-USB (older models).  
    - Requires 5V DC power supply with at least 2.5A current.  

9. Compact and Versatile  
    - Small credit card-sized form factor.  
    - Used in IoT, robotics, AI, automation, and learning projects.  

Applications  
- Home automation and IoT projects.  
- Media centers and smart displays.  
- Robotics and AI-based applications.  
- Web servers and software development.  
- Educational and DIY electronics projects.


6.Explain the use of the following functions of ESP8266.
● WiFi.mode()
● WiFi.begin()
● WiFi.config()

Functions of ESP8266 Wi-Fi Module  

1. WiFi.mode()  
Purpose:  
- Sets the Wi-Fi operating mode of the ESP8266.  

Syntax:  
```cpp
WiFi.mode(WIFI_MODE);
```
Modes Available:  
- `WIFI_OFF` – Disables Wi-Fi.  
- `WIFI_STA` – Enables Station mode (ESP8266 connects to a router).  
- `WIFI_AP` – Enables Access Point mode (ESP8266 creates its own Wi-Fi network).  
- `WIFI_AP_STA` – Enables both Station and Access Point modes.  

Example:  
    WiFi.mode(WIFI_STA); // Set ESP8266 in Station mode

---

2. WiFi.begin()  
Purpose:  
- Connects ESP8266 to a Wi-Fi network.  

Syntax:  

    WiFi.begin("SSID", "PASSWORD");
    - `"SSID"` – The Wi-Fi network name.  
    - `"PASSWORD"` – The Wi-Fi password.  

Example:  

    WiFi.begin("MyWiFi", "MyPassword");
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting...");
    }
Serial.println("Connected!");

---

3. WiFi.config()  
Purpose:  
- Sets a static IP address for the ESP8266 instead of using DHCP.  

WiFi.config(local_IP, gateway, subnet);

- `local_IP` – The static IP address assigned to ESP8266.  
- `gateway` – The router’s IP address.  
- `subnet` – The subnet mask.  

Example:  
    IPAddress local_IP(192, 168, 1, 100);
    IPAddress gateway(192, 168, 1, 1);
    IPAddress subnet(255, 255, 255, 0);
    WiFi.config(local_IP, gateway, subnet);


7. Describe GPIO available in raspberry pi.

 GPIO (General Purpose Input/Output) in Raspberry Pi  

 Introduction  
- GPIO pins in Raspberry Pi are used for interfacing sensors, actuators, and external devices like LEDs, motors, and switches.  
- These pins can be programmed as input or output using Python, C, or other languages.  

---

 GPIO Pin Layout  
- Raspberry Pi models (like Pi 4, Pi 3, and Pi Zero) have a 40-pin GPIO header.  
- Out of 40 pins, some are power pins, some are ground pins, and others are GPIO pins.  

 GPIO Pin Categories  
| Pin Type       | Description |
|---------------|-------------|
| GPIO Pins  | Can be set as Input or Output |
| Power Pins | 3.3V (2 pins) and 5V (2 pins) for supplying power to components |
| Ground (GND) | 8 pins connected to ground |
| I2C Pins   | SDA (GPIO2) and SCL (GPIO3) for I2C communication |
| SPI Pins   | MOSI (GPIO10), MISO (GPIO9), SCLK (GPIO11), and CE0/CE1 for SPI communication |
| UART Pins  | TX (GPIO14) and RX (GPIO15) for serial communication |

---

 GPIO Pin Numbering
Raspberry Pi supports two numbering schemes:  
1. BCM (Broadcom) numbering – Uses GPIO numbers (e.g., GPIO2, GPIO3).  
2. BOARD numbering – Uses physical pin positions (e.g., Pin 1, Pin 2).  



8 ESP8266 node MCU Operating modes - Station mode and Access point mode with program

 ESP8266 NodeMCU Operating Modes  

The ESP8266 NodeMCU has three WiFi operating modes:  
1. Station Mode (STA Mode) – Connects to an existing WiFi network.  
2. Access Point Mode (AP Mode) – Creates its own WiFi network.  
3. Dual Mode (STA + AP Mode) – Works as both Station and Access Point simultaneously.  

---

 1. Station Mode (STA Mode)  
In Station Mode, the ESP8266 connects to an existing WiFi network like a mobile or home router. It receives an IP address from the router and can communicate with other devices on the network.  

 Code for Station Mode (Connect ESP8266 to WiFi Router)
```cpp
include <ESP8266WiFi.h>

const char ssid = "Your_SSID";  // Replace with your WiFi name
const char password = "Your_PASSWORD";  // Replace with your WiFi password

void setup() {
    Serial.begin(115200);
    WiFi.mode(WIFI_STA);  // Set ESP8266 to Station mode
    WiFi.begin(ssid, password);

    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());  // Print ESP8266's IP Address
}

void loop() {
}
```
 How It Works?
- The ESP8266 is set to Station mode using `WiFi.mode(WIFI_STA)`.
- It connects to the specified WiFi network using `WiFi.begin(ssid, password)`.
- The IP address assigned by the router is printed in the Serial Monitor.

---

 2. Access Point Mode (AP Mode)
In Access Point Mode, the ESP8266 creates its own WiFi network that other devices (mobile, laptop) can connect to.  

 Code for Access Point Mode (ESP8266 Creates WiFi Network)
```cpp
include <ESP8266WiFi.h>

const char ssid = "ESP8266_AP";  // Name of WiFi created by ESP8266
const char password = "12345678";  // Password for WiFi (min 8 chars)

void setup() {
    Serial.begin(115200);
    WiFi.mode(WIFI_AP);  // Set ESP8266 to Access Point mode

    WiFi.softAP(ssid, password);
    Serial.println("ESP8266 Access Point Started");
    Serial.print("IP Address: ");
    Serial.println(WiFi.softAPIP());  // Print AP's IP Address
}

void loop() {
}
```
 How It Works?
- The ESP8266 is set to Access Point mode using `WiFi.mode(WIFI_AP)`.
- A new WiFi network "ESP8266_AP" is created using `WiFi.softAP(ssid, password)`.
- The IP address of the ESP8266 as an AP is printed.

---

 Conclusion
- Station Mode (STA Mode) → ESP8266 connects to an existing WiFi network.  
- Access Point Mode (AP Mode) → ESP8266 creates its own WiFi network for other devices to connect.  
- Can also operate in Dual Mode (STA + AP) where it acts as both at the same time.